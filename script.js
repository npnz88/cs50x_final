// --- static JSON generated by GitHub Actions ---
const SERIES_URL = './data/series.json';           // hourly-updated file
// const CURRENT_MATCHES_URL = './data/current_matches.json'; // if you use it later

const container = document.getElementById('series-container');

// ---- helpers ----
const MONTHS = { jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11 };

function parseSeriesDate(dateStr, fallbackYear) {
  const iso = /^(\d{4})-(\d{2})-(\d{2})$/.exec((dateStr || '').trim());
  if (iso) {
    const [_, y, m, d] = iso;
    return new Date(Date.UTC(+y, +m - 1, +d));
  }
  const md = /^([A-Za-z]{3})\s+(\d{1,2})$/.exec((dateStr || '').trim());
  if (md && fallbackYear) {
    const month = MONTHS[md[1].toLowerCase()];
    const day = +md[2];
    return new Date(Date.UTC(fallbackYear, month, day));
  }
  return new Date(NaN);
}

function todayUTCDateOnly() {
  const now = new Date();
  return new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()));
}

async function safeFetchJson(url) {
  const r = await fetch(url);
  if (!r.ok) throw new Error(`HTTP ${r.status}`);
  return r.json();
}

function renderSeries(payload) {
  if (!container) return;
  container.innerHTML = '';

  if (!payload || !Array.isArray(payload.data)) {
    container.innerHTML = `<pre style="color:#c33;background:#222;padding:8px;border-radius:6px">
Unexpected JSON shape:
${JSON.stringify(payload, null, 2)}</pre>`;
    return;
  }

  const latestSeries = payload.data.slice(0, 10);
  const todayUTC = todayUTCDateOnly();

  latestSeries.forEach(series => {
    const start = parseSeriesDate(series.startDate, null);
    const fy = !isNaN(start) ? start.getUTCFullYear() : todayUTC.getUTCFullYear();
    let end = parseSeriesDate(series.endDate, fy);
    if (!isNaN(start) && !isNaN(end) && end < start) {
      end = new Date(Date.UTC(end.getUTCFullYear() + 1, end.getUTCMonth(), end.getUTCDate()));
    }
    const isActive = !isNaN(start) && !isNaN(end) && todayUTC >= start && todayUTC <= end;

    const tile = document.createElement('div');
    tile.style.border = '1px solid #ccc';
    tile.style.padding = '10px';
    tile.style.margin = '10px 0';
    tile.style.borderRadius = '8px';
    tile.style.backgroundColor = isActive ? '#e6ffe6' : '#f0f0f0';

    tile.innerHTML = `
      <h3>${series.name}</h3>
      <p>Start: ${series.startDate ?? '—'} | End: ${series.endDate ?? '—'}</p>
      <p>Matches: ${series.matches ?? '—'}</p>
      ${isActive ? '<p style="color: green; font-weight: bold;">ACTIVE NOW</p>' : ''}
    `;
    container.appendChild(tile);
  });
}

// ---- boot ----
// Make sure your <script> tag is at the end of <body> or has defer, so #series-container exists.
(async function init() {
  try {
    const data = await safeFetchJson(SERIES_URL);
    renderSeries(data);
  } catch (e) {
    console.error('Failed to load series.json:', e);
    if (container) {
      container.innerHTML = '<p style="color:#c33">Could not load data. Try again later.</p>';
    }
  }
})();
